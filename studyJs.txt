
-------------------------------------------x-----------------------------x-----------------------------
Everything in javascript happens inside an execution context

assume javascript as a big box or a container in which whole code is executed that container is divided into two parts and those two parts are:-

memory container and code container 

memory container:- here everything is stored in key value pair relationship for example var a=10;
a is the key and 10 is the value even functions are stored in key value pair relationship
this memory container is also known as variable environment, It is sort of an environment in which everything is stored as a key value pair relationship


code component:-
here the code is executed one line at a time
this is also called as thread of execution



----------------------------------------------------x-------------------------x------------------

Javascript is a synchronous single threaded language

here single threaded means that it will execute the code one command at a time and in a specific order

synchronous single thread means:-
i.e. it will only go below once the current line is executed


what happens when we run a js code:-

---------------------------------------
let n =2;                             |
                                      |
let squareNum =(n)=>{  (here n is the argument)               
int ans  = n*n;                       |
return n;                             |
}                                     | 
                                      |
let square = squareNum(n); (here n is the parameter of the function)
                                      |
let square4 = squareNum(4);           |
                                      |
---------------------------------------

when you run the code above a global execution context is created:-
the execution context is created in two phases that is 
the memory creation phase and
the code execution phase
two components are created memory and code component.

Now in the first memory phase :-
as it encounter line 1 it will allocate memory n 
in line 2 it will allocate memory to squareNum

now in n it will store a value which is undefined

and in function squareNum it will store the whole code in variable named squareNum

then in below line it will allocate memory to square and square4 which is undefined



the second phase is the code execution phase:-
so now the js will go line by line again and as soon as it ecounters line 1 it will place the value to the variable that is n = 2

in the next line it has nothing to execute as the function is already stored in memory phase so it goes to next line where a variable is invoking a function in line 
square =  squareNum(n);

function is like a mini program and now inside a function a new execution context is created inside a global execution context and inside the mini execution context
memory creation and code execution phase happens where we allocate memory and initialize variable and do the code that it is written in inside the function and return the variable 

what happens while executing return statement:-
whenever we see a return then we inform the function that our work here is done and return the control of the program where it was invoked

now hwen the execution context for line:-
let square = squareNum(n); is done then that whole execution context is deleted.

now in the next line another mini execution context is created and does the same thing as the previous mini execution context has done.

hwne each line is executed or the program is finished then the whole global execution context is deleted


-----------------------------------------x------------------------x----------------------------------------
if we use function as an arrow function then it will behave as a variable so in that case we cannot initialize a function name first and then make the function which is possible while making normal js function.

--------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------x-----------------------
what is window?
window is a global object which is created along the global execution context.

whenever you create a execution context a "this" is created along with it even for the functional execution context and in global level that "this" points to window which is the global object

window is the global object and the global space is attached to it
--------------------------------x----------------------------------------------------------
global space:-

var a=10;
this a is in global space
function b(){
var x=10;
}
now function b() is in global space but var x is not in global space as it is initialized inside the function

-------------------------x------------------------x----------------------------------------

undefined and not defined:-
undefined is only present in js and not in other languages.

let a =3;
console.log(x);


now in global execution context memory and code component is created at first the global execution context will check if there is any variable/function present or not if a variable is present then it will allocate some memory in the form of "undefined" and in case of function it will just make a copy of that function and store it in memory component 

Now in the code component when js goes down to line:-
let a =3;
then it assigns the value 3 to a in global execution context before that it is only defined as undefined only 

while not defined is when a variable is not being initialized and it is getting used

for example in line:-
console.log(x);

here you will get x is not defined as it wasn't initialized before in js file.
-------------x------------------------x-----------------x----------------------------------

scope, scope chain, lexical environment:-


function a(){
        console.log(b);
    }
    
    var b=10;
    a();

in this code above we will be able to print the value of b even if it is not initialized inside function a.


function a(){
        var b=10;
    }
    
    a();
    console.log(b);

however in code above we will get b is undefined when it is initialized in function a but we are trying to print it outside of function b.




xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
what is lexical environment?

{{whenever an execution context is created a lexical environment is also created
lexical environment is the local memory along with the lexical environment of its parent for example in above code while invoking function a() we were able to print b which was initialized outside function a in its parent execution context}}

but

we were not able to do the same for 2nd example because the b value was initialized in function a and so the lexical environment doesn't has the scope to check its child's scope so it shows undefined

lexical means in order or in hierarchy which means function a in the above example was lexically inside global function

lexical environment means the local memory along with the lexical environment of it's parent.
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
what is scope chain?

scope chain is the chain of  lexical environment

scope chain means it will keep on going from one lexical environment to (it's parent)another until it can't find the value pf that particular variable then it will send an error of not defined
------------------x----------------------x------------------------x------------------------
---------------------------------------------------------------------------------------------------------------------------------
HOISTING of LET and CONST 

let a =10;
var b=20;

-----------------x-------------------x-----------------------
console.log(b);
let a=10;
var b =100;


now in js here you would get an undefined when we try to print b before it's initialization due to hoisting
------------------------x---------------------x---------------------------------
console.log(a);
let a=10;
var b =100;


here you will get an error which:- says namasteJs1.js:10 Uncaught ReferenceError: Cannot access 'a' before initialization


memory was assigned to be through var declaration and b was attached to the global object but in case of let and const they are allocated memory but they are stored in a separate memory space than global space and you cannot access that memory space before you have put in some value in there
---------------------x--------------------------------x-----------------

temporal dead zone is the time since when this let variable was hoisted and and till it is initialized some value is called as temporal dead zone

---------------------------------------------------------------------------------

difference between syntax ,type and reference error:-

type error occurs during initialization for example:-

const b ;
b==100;
console.log(b);

here type error will occur:-uncaught type error : assignment to constant variable.

Syntax ERROR:-
syntax error occurs when there is a problem in syntax for example:-

const b;

here you will get a syntax error:- missing initializer in const declaration.

Reference error:-
for ex:-
console,log(a);
let a=9;
here you will get a reference error:-
cannot access 'a' before initialization.
-----------------------------------------------------------------------------------------
difference between var,let and const?

const is for permanent declaration which will not change for example 
name,birth year etc

let:- it has a temporal deadzone which avoids error like undefined etc

var is not used often in today's js as it is old age.

to avoid temporal deadzone just put deckaration on top of the scope which will help us avoid unexpected error to avoid temporal dead zone.
----------------------x-------------------------x-------------------------x----------------

Block scope and shadowing:-

what is block?
block is also known as compound statement it is used to combine multiple js line into a single group
we group multiple statements together in a block so that we can use it where js expects one statements.
for example :-

if(true){
var a = 10;
console.log(a);
}

code inside {} is called a block where js expects only one statement

here that one statement is "10"
--------------------------------------------------------------------------------------
what is block scoped?
whatever variable, function is accessible inside that block is called block scope

for ex:-
{
var a=10;
let b=20;
const c =30;
}

here when we check var a will be globally scoped an let, const will be blocked scoped
as it is stored in a reserved memory space which is for the block

{
var a=10;
let b=20;
const c =30;
console.log(a);
console.log(b);
console.log(a);

}
console.log(a);
console.log(b);
console.log(c);


here you will get output as 
10
20
30
10

first 10,20,30 are from the {} and then another 10 is print because a is global scoped 
for 
console.log(b);
console.log(c);
it will show a reference error as b and c are not in global scope.
----------------------------------------------------------------------------------
what is shadowing?

if we have same name variable outside the scope for example:-
var a=100;
{
var a=10;
let b=20;
const c =30;
console.log(a);
console.log(b);
console.log(a);

}
so in this case the variable a in block will shadow the variable a outside the scope and it will print 10.

now in another case:-
var a=100;
{
var a=10;
let b=20;
const c =30;
console.log(a);
console.log(b);
console.log(a);

}
console.log(a);

now the print statement outside it will print 10 as it is shadowing the var a =100 because both of them are pointing at one var a in global scope and since a=10 line is below it is overriding that value and updating it to 10 so this is called shadowing.

the above case will only occur when it is var incase of let and const ot will not happen since let and const both are block scoped and var is global scoped
let b=100;
{
var a=10;
let b=20;
const c =30;
console.log(a);
console.log(b);
console.log(a);

}
console.log(b);

here you will get output as 
10
20
30
100

since the first three are printed as they were in block and shadowing only occurs for let and const when they are inside the block out side the block let b =20 is shadowed and in the first line b=100 is printed as it is within another memory space called script where let and const variables are stored another space other than global scope
--------------------------------------------------------------------------x--------------------------------x--------------------------

what is closure?


function x(){
    var a =11;
    function y(){
        console.log(a);
    }
    y();
}
x();

here the output will be 11 because of its lexical environment concept.

closure is a function which is bind together with its lexical environment
function along with its lexical scope bundled together is called a closure.


function x(){
    var a =11;
    function y(){
        console.log(a);
    }
    return y;
}
var z = x();

console.log(z);
z();

we can even return a function made inside a function and store that in a variable
as done in the above example and after calling that variable we will see the output 
if function y which is 11 because of closures having its function's lexical scope in memory.

you can also write this function:
function x(){
    var a =11;
    function y(){
        console.log(a);
    }
    return y;
}

AS THIS :
function x(){
    var a =11;
    return function y(){
        console.log(a);
    } 
}


corner case in closure:-

function x(){
    var a =11;
    function y(){
        console.log(a);
    }
    a=100;
    return y;
}
var z = x();

console.log(z);
z();

here it will return a 100 as output
because the answer is that a's reference is returned not the value and 
here the  reference a is updated to 100.


uses of closures:-
 it is used in module design pattern 
 it is used in iterators
 it is used in setTimeouts 
-------------------------------------x-------------------------x------------------x------------x-----------------------------------

 here:-

 function x(){
    var i =1;
    setTimeout(function(){
        console.log(i);
    },4000);
    console.log("nnn");
}

x();

the setTimeout forms a closure.

the setTimeout takes the callback function And stores it and attaches the timer of 4 seconds and goes ahead 
once that timeout has


in this case :-

function x(){
    for(var i =1;i<=5;i++){
        setTimeout(function(){
            console.log(i);
        },i*1000);
    }
    console.log("nnn");
}

x();

output will be :-
6
6
6
6
6
because var is global scope and since the reference of "i" is passed it stores the same value
for each and every iteration and since js doesn't wait for setTimeout it finishes it's execution
and by the time runs out the value of i is 6 after i =5 it increments the last time and store it.

but in this case :-
function x(){
    for(let i =1;i<=5;i++){
        setTimeout(function(){
            console.log(i);
        },i*1000);
    }
    console.log("nnn");
}

x();

the output will be correct which is :-
1
2
3
4
5

because let is block scope which means it will store that variable for each iteration and print it after the timer ends
that means after each and every new iteration this i is a new copy of i and each time setTimeout is run this callback function has a new identity of i with it
so it is like each time i is called it is referring to a different memory location which is a separate copy of i

it is only working because let is block scoped and it creates a new copy every time the loop is excuted.




we can do the same with var too

here it is :-
function x(){
    for(var i =1;i<=5;i++){

        function close(x){
            setTimeout(function(){
                console.log(x);
            },x*1000);
        }
        close(i);
    }
    console.log("nnn");
}

x();

in this code inside the for loop we have made another function named close
and in that function we have passed the setTimeout function and outside the function we have called the function
close and passed i to it.

here every time we call the close function with i it creates the new copy of i for itself.


example to explain closure:

function outer(){
var a =10;
function inner(){
console.log(a);
}
return inner;
}

outer()(); 

here the variable is created in function outer and inside function outer another function is created called inner and inside function inner variable a is printed 
here the inner function has its lexical scope of its parent too so this is called as closures and also if we return the function inner and use it outside it's scope then too it will remember its lexical environment and do the job.
in outer()();
outer() is called, which returns the inner function.
The returned inner function is then immediately invoked with ().
first () is used to returning the inner function.
second () is used to calling the inner function.


if there is another function outside outer then too the inner function will form a closure:
example:-
function outest(){
    var c =220;
function outer(b){
var a =10;
function inner(){
console.log(a, b , c);
}
return inner;
}
return outer;
}
var close = outest()("helloworld"); 
close();

here we have created a function outside outer named outest and it has a new variable called c 
inner can have access to c variable outside outer cause of the lexical environment of outer
now outside its scope we are creating a variable named close and calling outest()
and passing argument to outer function ("helloworld");
and in the next line we are calling close to check if it prints all variables or not.


disadvantages of closure:-
overconsumption of memory
those variables inside closure are not garbage collected till the program expired 
and if not handled it can lead to memory leaks


gabrage collector is like a program which freezes up the un utilized memory

relation between garbage collector and closures:-

function a(){
    var x =2;
    return function b(){
        console.log(x);
    }
}

a();

after execution of a the var x is garbage collected but due to closure of func b it is not garbage collected.

